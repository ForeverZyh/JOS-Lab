1. At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?
in boot.S:
movw    $PROT_MODE_DSEG, %ax    # Our data segment selector
in boot.S:
ljmp    $PROT_MODE_CSEG, $protcseg

2. What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?
in boot.asm:
7d6b:	ff 15 18 00 01 00    	call   *0x10018
0x10018:	or $0x0,%al

3. Where is the first instruction of the kernel?
0x10018

4. How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?
ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
eph = ph + ELFHDR->e_phnum;
Using information in ELFHDR(ELF Header)
